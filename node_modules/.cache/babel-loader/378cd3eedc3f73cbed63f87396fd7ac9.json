{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Movies/FullMovie/FullMovie.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ReadMore from 'read-more-react';\nimport './FullMovie.css';\n\nconst FullMovie = props => {\n  _s();\n\n  const imageCoverUrl = \"https://image.tmdb.org/t/p/original\" + props.movieInfo.backdrop_path;\n  const imagePosterUrl = \"https://image.tmdb.org/t/p/w342/\" + props.movieInfo.poster_path;\n  const year = props.movieInfo.release_date.split(\"-\")[0];\n  const genres = props.movieInfo.genre_ids;\n  const overview = props.movieInfo.overview;\n  useEffect(() => {\n    console.log(\"UseEffect in full movies\");\n  }, []);\n  console.log(\"Props from fullmovie\", props);\n  console.log(\"geners of movie\", genres);\n  let genresList = genres.map(generID => {\n    console.log(\"FullMovie genreID\", generID);\n    let res = props.genersData.geners.find(gener => {\n      // eslint-disable-next-line eqeqeq\n      console.log(\"this is gener in FullMovie\", gener);\n\n      if (gener.id == generID) {\n        return gener.name;\n      } else return null;\n    });\n    console.log(res);\n    return res.name;\n  }); // console.log(genresList)\n\n  let generToShow = genresList.join(', '); // TODO: Need to divide to components \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fullMovieContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info_section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie_header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"locandina\",\n          src: imagePosterUrl,\n          alt: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: props.movieInfo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [year, \", David Ayer\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"type\",\n          children: generToShow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"minutes\",\n          children: \"117 min\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie_desc\",\n        children: /*#__PURE__*/_jsxDEV(ReadMore, {\n          text: overview,\n          min: 50,\n          ideal: 60,\n          max: 80,\n          readMoreText: \"Read more...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"blur_back\",\n      src: imageCoverUrl,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FullMovie, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = FullMovie;\n\nconst mapStateToProps = state => {\n  return {\n    genersData: state.geners\n  };\n}; // const mapDispatchToProps = dispatch => {\n//     return {\n//         fetchGeners: async () => await dispatch(await fetchGeners())\n//     }\n// }\n\n\nexport default connect(mapStateToProps // mapDispatchToProps\n)(FullMovie);\n\nvar _c;\n\n$RefreshReg$(_c, \"FullMovie\");","map":{"version":3,"sources":["/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Movies/FullMovie/FullMovie.js"],"names":["React","useEffect","connect","ReadMore","FullMovie","props","imageCoverUrl","movieInfo","backdrop_path","imagePosterUrl","poster_path","year","release_date","split","genres","genre_ids","overview","console","log","genresList","map","generID","res","genersData","geners","find","gener","id","name","generToShow","join","title","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport ReadMore from 'read-more-react';\n\nimport './FullMovie.css';\n\nconst FullMovie = (props) => {\n\n    const imageCoverUrl = \"https://image.tmdb.org/t/p/original\" + props.movieInfo.backdrop_path\n    const imagePosterUrl = \"https://image.tmdb.org/t/p/w342/\" + props.movieInfo.poster_path;\n    const year = props.movieInfo.release_date.split(\"-\")[0]\n    const genres = props.movieInfo.genre_ids\n    const overview = props.movieInfo.overview\n\n    useEffect(() => {\n        console.log(\"UseEffect in full movies\")\n    }, [])\n    console.log(\"Props from fullmovie\", props)\n\n    console.log(\"geners of movie\", genres)\n\n    let genresList = genres.map(generID => {\n        console.log(\"FullMovie genreID\", generID)\n        let res = props.genersData.geners.find(gener => {\n            // eslint-disable-next-line eqeqeq\n            console.log(\"this is gener in FullMovie\", gener)\n            if (gener.id == generID) {\n                return gener.name\n            }\n            else return null\n        })\n        console.log(res)\n        return res.name\n    })\n\n    // console.log(genresList)\n    let generToShow = genresList.join(', ')\n\n\n    // TODO: Need to divide to components \n    return (\n        <div className=\"fullMovieContainer\">\n            <div className=\"info_section\">\n                <div className=\"movie_header\">\n                    <img className=\"locandina\" src={imagePosterUrl} alt=\" \" />\n                    <h1>{props.movieInfo.title}</h1>\n                    <h4>{year}, David Ayer</h4>\n                    <p className=\"type\">{generToShow}</p>\n                    <span className=\"minutes\">117 min</span>\n                </div>\n                <div className=\"movie_desc\">\n                    <ReadMore\n                        text={overview}\n                        min={50}\n                        ideal={60}\n                        max={80}\n                        readMoreText={\"Read more...\"}\n                    />\n                </div>\n                {/* TODO: Need to create movie Social buttons and use functionality */\n                /* <div className=\"movie_social\">\n                    <ul>\n                        <li><i className=\"material-icons\">share</i></li>\n                        <li><i className=\"material-icons\">î¡½</i></li>\n                        <li><i className=\"material-icons\">chat_bubble</i></li>\n                    </ul>\n                </div> */}\n            </div>\n            <img className=\"blur_back\" src={imageCoverUrl} alt=\"\" />\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        genersData: state.geners\n    }\n}\n\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         fetchGeners: async () => await dispatch(await fetchGeners())\n//     }\n// }\n\nexport default connect(\n    mapStateToProps,\n    // mapDispatchToProps\n)(FullMovie)\n\n"]},"metadata":{},"sourceType":"module"}