{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Filter/filterItem/Dropdown/dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react'; //{/*useState*/ }\n\nimport { connect } from 'react-redux';\nimport { fetchGenres, fetchQualities } from '../../../../redux';\nimport DropdownItem from './dropdownItem'; // import './dropdown.scss''\n\nconst Dropdown = ({\n  filter,\n  selectedGenre,\n  selectedQuality,\n  genresData,\n  qualitiesData,\n  fetchGenres,\n  fetchQualities,\n  onGenreChange,\n  onQualityChange\n}) => {\n  _s();\n\n  useEffect(() => {\n    fetchGenres();\n  }, [fetchGenres]);\n  useEffect(() => {\n    fetchQualities();\n  }, [fetchQualities]); // const onDropDownItemClick = (id) => {\n  //     onGenreChange(id);\n  // }\n\n  if (filter === \"genre\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: genresData.map(genre => {\n        return /*#__PURE__*/_jsxDEV(DropdownItem, {\n          label: genre.name,\n          value: genre.id // selected={selectedGenre}\n          ,\n          onDropDownItemClick: () => onGenreChange(genre)\n        }, genre.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false);\n  } else if (filter === \"quality\") {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: qualitiesData.map(item => {\n        return /*#__PURE__*/_jsxDEV(DropdownItem, {\n          label: item.name,\n          value: item.id,\n          selected: selectedQuality,\n          onDropDownItemClick: () => onQualityChange(item)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false);\n  }\n};\n\n_s(Dropdown, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = Dropdown;\n\nconst mapStateToProps = state => {\n  // console.log(\"dropdown state: \", state);\n  return {\n    genresData: state.filters.genres,\n    qualitiesData: state.filters.qualities,\n    selectedGenre: state.movies.genre,\n    selectedQuality: state.movies.quality\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchGenres: async () => await dispatch(await fetchGenres()),\n    fetchQualities: async () => await dispatch(await fetchQualities()),\n\n    onGenreChange(genre) {\n      dispatch({\n        type: 'SET_GENRE',\n        genre\n      });\n    },\n\n    onQualityChange(quality) {\n      dispatch({\n        type: 'SET_QUALITY',\n        quality\n      });\n    }\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dropdown);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Filter/filterItem/Dropdown/dropdown.js"],"names":["React","useEffect","connect","fetchGenres","fetchQualities","DropdownItem","Dropdown","filter","selectedGenre","selectedQuality","genresData","qualitiesData","onGenreChange","onQualityChange","map","genre","name","id","item","mapStateToProps","state","filters","genres","qualities","movies","quality","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'//{/*useState*/ }\nimport { connect } from 'react-redux'\nimport { fetchGenres, fetchQualities } from '../../../../redux'\nimport DropdownItem from './dropdownItem'\n\n\n// import './dropdown.scss''\n\nconst Dropdown = ({\n    filter,\n    selectedGenre,\n    selectedQuality,\n    genresData,\n    qualitiesData,\n    fetchGenres,\n    fetchQualities,\n    onGenreChange,\n    onQualityChange\n}) => {\n\n    useEffect(() => {\n        fetchGenres()\n    }, [fetchGenres])\n\n    useEffect(() => {\n        fetchQualities()\n    }, [fetchQualities])\n\n    // const onDropDownItemClick = (id) => {\n    //     onGenreChange(id);\n    // }\n    if (filter === \"genre\") {\n        return (\n            <>\n                {genresData.map((genre) => {\n                    return <DropdownItem\n                        key={genre.id}\n                        label={genre.name}\n                        value={genre.id}\n                        // selected={selectedGenre}\n                        onDropDownItemClick={() => onGenreChange(genre)}\n                    />\n                })}\n            </>\n\n        )\n    } else if (filter === \"quality\") {\n        return (\n            <>\n                {qualitiesData.map((item) => {\n                    return <DropdownItem\n                        key={item.id}\n                        label={item.name}\n                        value={item.id}\n                        selected={selectedQuality}\n                        onDropDownItemClick={() => onQualityChange(item)}\n                    />\n                })}\n            </>\n\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    // console.log(\"dropdown state: \", state);\n    return {\n        genresData: state.filters.genres,\n        qualitiesData: state.filters.qualities,\n        selectedGenre: state.movies.genre,\n        selectedQuality: state.movies.quality\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchGenres: async () => await dispatch(await fetchGenres()),\n        fetchQualities: async () => await dispatch(await fetchQualities()),\n        onGenreChange(genre) {\n            dispatch({\n                type: 'SET_GENRE',\n                genre\n            });\n        },\n        onQualityChange(quality) {\n            dispatch({\n                type: 'SET_QUALITY',\n                quality\n            });\n        }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dropdown)\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}