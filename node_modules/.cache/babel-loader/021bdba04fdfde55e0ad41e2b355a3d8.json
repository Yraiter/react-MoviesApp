{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Movies/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../../redux';\nimport MovieCard from './MovieCard/MovieCard';\nimport Modal from '../UI/Modal/Modal';\nimport \"./Movies.css\";\n\nconst Movies = ({\n  moviesData,\n  fetchMovies\n}) => {\n  _s();\n\n  //create states using hooks\n  // const [movies, setMovies] = useState('')\n  const [selectedMovieId, setSelectedMovieID] = useState(null);\n  const [showFull, setShowFull] = useState(false);\n  useEffect(() => {\n    console.log(\"Use useEffect in Movies\");\n    fetchMovies();\n  }, [fetchMovies]);\n\n  const SelectedHandler = id => {\n    console.log(id);\n    setSelectedMovieID(id);\n  };\n\n  const HideShowHandler = () => {\n    setShowFull(!showFull);\n  };\n\n  const findMovieByID = id => {\n    console.log(\"findMovie BY ID: \" + id);\n    return moviesData.movies.filter((key, Indexmovie) => {\n      // eslint-disable-next-line eqeqeq\n      if (moviesData.movies[Indexmovie].id == id) {\n        return moviesData.movies[Indexmovie];\n      } else return null;\n    });\n  };\n\n  const moviesList = Object.keys(moviesData.movies).map((key, Indexmovie) => {\n    return /*#__PURE__*/_jsxDEV(MovieCard, {\n      ShowHideHandler: HideShowHandler,\n      SelectedMovieHandler: SelectedHandler,\n      SelectedMovie: selectedMovieId,\n      show: showFull,\n      movieInfo: moviesData.movies[Indexmovie]\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this);\n  });\n  let modal;\n\n  if (showFull === true) {\n    let selecedMovie = findMovieByID(selectedMovieId);\n    console.log(selecedMovie[0]); //backdrop_path\n\n    modal = /*#__PURE__*/_jsxDEV(Modal, {\n      show: showFull,\n      ShowHideHandler: HideShowHandler,\n      movieInfo: selecedMovie[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  } else modal = null;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [modal, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movies\",\n      children: moviesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movies, \"6U/CvEQgridhhM09uG1GMvAmwAk=\");\n\n_c = Movies;\n\nconst mapStateToProps = state => {\n  return {\n    moviesData: state.movies\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMovies: async () => dispatch(await fetchMovies())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movies);\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Movies/Movies.js"],"names":["React","useState","useEffect","connect","fetchMovies","MovieCard","Modal","Movies","moviesData","selectedMovieId","setSelectedMovieID","showFull","setShowFull","console","log","SelectedHandler","id","HideShowHandler","findMovieByID","movies","filter","key","Indexmovie","moviesList","Object","keys","map","modal","selecedMovie","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux'\nimport { fetchMovies } from '../../redux'\nimport MovieCard from './MovieCard/MovieCard';\nimport Modal from '../UI/Modal/Modal';\nimport \"./Movies.css\";\n\nconst Movies = ({ moviesData, fetchMovies }) => {\n\n    //create states using hooks\n    // const [movies, setMovies] = useState('')\n    const [selectedMovieId, setSelectedMovieID] = useState(null)\n    const [showFull, setShowFull] = useState(false)\n\n\n    useEffect(() => {\n        console.log(\"Use useEffect in Movies\")\n        fetchMovies()\n    }, [fetchMovies])\n\n    const SelectedHandler = id => {\n        console.log(id)\n        setSelectedMovieID(id);\n    }\n\n    const HideShowHandler = () => {\n        setShowFull(!showFull)\n    }\n\n    const findMovieByID = (id) => {\n        console.log(\"findMovie BY ID: \" + id)\n        return moviesData.movies.filter((key, Indexmovie) => {\n            // eslint-disable-next-line eqeqeq\n            if (moviesData.movies[Indexmovie].id == id) {\n                return moviesData.movies[Indexmovie]\n            }\n            else return null\n        })\n    }\n\n    const moviesList = Object.keys(moviesData.movies).map((key, Indexmovie) => {\n        return <MovieCard\n            key={key}\n            ShowHideHandler={HideShowHandler}\n            SelectedMovieHandler={SelectedHandler}\n            SelectedMovie={selectedMovieId}\n            show={showFull}\n            movieInfo={moviesData.movies[Indexmovie]}\n        />\n    })\n\n    let modal;\n    if (showFull === true) {\n        let selecedMovie = findMovieByID(selectedMovieId)\n        console.log(selecedMovie[0])//backdrop_path\n        modal =\n            <Modal\n                show={showFull}\n                ShowHideHandler={HideShowHandler}\n                movieInfo={selecedMovie[0]}\n            />\n    }\n    else modal = null;\n\n    return (\n        <>\n            { modal}\n            <ul className=\"movies\">\n                {moviesList}\n            </ul>\n        </>\n    )\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n        moviesData: state.movies\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchMovies: async () => dispatch(await fetchMovies())\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Movies)\n\n"]},"metadata":{},"sourceType":"module"}