{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_MOVIES_REQUEST, FETCH_MOVIES_SUCCESS, FETCH_MOVIES_FAILURE, SET_SEARCH_TERM } from './moviesTypes';\n\nconst featchMoviesAjax = dispatch => {\n  axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=ab2fefad2fb133b8288873e93a86f02e&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`).then(response => {\n    const moviesRes = response.data.results;\n    let lowestYear = 2006;\n    let tmp;\n    moviesRes.filter(m => {\n      if (m.release_date) {\n        m[\"release_year\"] = parseInt(m.release_date.split('-')[0]);\n        tmp = parseInt(m.release_year);\n        if (tmp < lowestYear) lowestYear = tmp;\n        return m;\n      }\n    });\n    dispatch(fetchMoviesSuccess({\n      movies: moviesRes,\n      lowestYear\n    }));\n  }).catch(error => {\n    // error.message is the error message\n    dispatch(fetchMoviesFailure(error.message));\n  });\n};\n\nexport const fetchMovies = () => {\n  return dispatch => {\n    dispatch(fetchMoviesRequest()); // console.log(\"fetch movies from axios and redux\")\n\n    featchMoviesAjax(dispatch);\n  };\n};\nexport const searchMovies = query => {\n  return dispatch => {\n    dispatch(searchMoviesRequest(query)); // console.log(\"fetch movies from axios and redux\")\n\n    if (query.length > 0) {\n      axios.get(`https://api.themoviedb.org/3/search/movie?api_key=ab2fefad2fb133b8288873e93a86f02e&query=${query}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`).then(response => {\n        const moviesRes = response.data.results;\n        let lowestYear = 2006;\n        let tmp;\n        moviesRes.forEach(m => {\n          moviesRes.filter(m => {\n            if (m.release_date) {\n              m[\"release_year\"] = parseInt(m.release_date.split('-')[0]);\n              tmp = parseInt(m.release_year);\n              if (tmp < lowestYear) lowestYear = tmp;\n              return m;\n            }\n          });\n        });\n        dispatch(fetchMoviesSuccess({\n          movies: moviesRes,\n          lowestYear\n        }));\n      }).catch(error => {\n        // error.message is the error message\n        dispatch(fetchMoviesFailure(error.message));\n      });\n    } else {\n      featchMoviesAjax(dispatch);\n    }\n  };\n};\nexport const fetchMoviesRequest = () => {\n  return {\n    type: FETCH_MOVIES_REQUEST\n  };\n};\nexport const fetchMoviesSuccess = data => {\n  return {\n    type: FETCH_MOVIES_SUCCESS,\n    payload: data\n  };\n};\nexport const fetchMoviesFailure = error => {\n  return {\n    type: FETCH_MOVIES_FAILURE,\n    payload: error\n  };\n};\nexport const searchMoviesRequest = search_term => {\n  return {\n    type: SET_SEARCH_TERM,\n    search_term\n  };\n}; // export const searchMoviesSuccess = data => {\n//     return {\n//         type: SEARCH_MOVIES_SUCCESS,\n//         payload: data\n//     }\n// }\n// export const searchMoviesFailure = error => {\n//     return {\n//         type: SEARCH_MOVIES_FAILURE,\n//         payload: error\n//     }\n// }","map":{"version":3,"sources":["/Users/yairraiter/movieApp_v3/react-MoviesApp/src/redux/movies/moviesActions.js"],"names":["axios","FETCH_MOVIES_REQUEST","FETCH_MOVIES_SUCCESS","FETCH_MOVIES_FAILURE","SET_SEARCH_TERM","featchMoviesAjax","dispatch","get","then","response","moviesRes","data","results","lowestYear","tmp","filter","m","release_date","parseInt","split","release_year","fetchMoviesSuccess","movies","catch","error","fetchMoviesFailure","message","fetchMovies","fetchMoviesRequest","searchMovies","query","searchMoviesRequest","length","forEach","type","payload","search_term"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n    FETCH_MOVIES_REQUEST,\n    FETCH_MOVIES_SUCCESS,\n    FETCH_MOVIES_FAILURE,\n    SET_SEARCH_TERM\n} from './moviesTypes'\n\nconst featchMoviesAjax = (dispatch) => {\n    axios\n            .get(`https://api.themoviedb.org/3/discover/movie?api_key=ab2fefad2fb133b8288873e93a86f02e&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`)\n            .then(response => {\n                const moviesRes = response.data.results;\n                let lowestYear = 2006;\n                let tmp;\n                moviesRes.filter(m => {\n                    if(m.release_date){\n                        m[\"release_year\"] = parseInt(m.release_date.split('-')[0]);\n                        tmp = parseInt(m.release_year);\n                        if (tmp < lowestYear) lowestYear = tmp;\n                        return m;\n                    }\n                });\n                dispatch(fetchMoviesSuccess({ movies: moviesRes, lowestYear }))\n            })\n            .catch(error => {\n                // error.message is the error message\n                dispatch(fetchMoviesFailure(error.message))\n            })\n}\n\nexport const fetchMovies = () => {\n    return (dispatch) => {\n        dispatch(fetchMoviesRequest())\n        // console.log(\"fetch movies from axios and redux\")\n        featchMoviesAjax(dispatch);\n    }\n}\n\nexport const searchMovies = (query) => {\n    return (dispatch) => {\n        dispatch(searchMoviesRequest(query))\n        // console.log(\"fetch movies from axios and redux\")\n        if (query.length > 0) {\n            axios\n                .get(`https://api.themoviedb.org/3/search/movie?api_key=ab2fefad2fb133b8288873e93a86f02e&query=${query}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`)\n                .then(response => {\n                    const moviesRes = response.data.results;\n                    let lowestYear = 2006;\n                    let tmp;\n                    moviesRes.forEach(m => {\n                        moviesRes.filter(m => {\n                            if(m.release_date){\n                                m[\"release_year\"] = parseInt(m.release_date.split('-')[0]);\n                                tmp = parseInt(m.release_year);\n                                if (tmp < lowestYear) lowestYear = tmp;\n                                return m;\n                            }\n                        });\n                    });\n                    dispatch(fetchMoviesSuccess({ movies: moviesRes, lowestYear }))\n                })\n                .catch(error => {\n                    // error.message is the error message\n                    dispatch(fetchMoviesFailure(error.message))\n                })\n        } else {\n            featchMoviesAjax(dispatch);\n        }\n    }\n}\n\nexport const fetchMoviesRequest = () => {\n    return {\n        type: FETCH_MOVIES_REQUEST\n    }\n}\n\nexport const fetchMoviesSuccess = data => {\n    return {\n        type: FETCH_MOVIES_SUCCESS,\n        payload: data\n    }\n}\n\nexport const fetchMoviesFailure = error => {\n    return {\n        type: FETCH_MOVIES_FAILURE,\n        payload: error\n    }\n}\n\nexport const searchMoviesRequest = search_term => {\n    return {\n        type: SET_SEARCH_TERM,\n        search_term\n    }\n}\n\n// export const searchMoviesSuccess = data => {\n//     return {\n//         type: SEARCH_MOVIES_SUCCESS,\n//         payload: data\n//     }\n// }\n\n// export const searchMoviesFailure = error => {\n//     return {\n//         type: SEARCH_MOVIES_FAILURE,\n//         payload: error\n//     }\n// }"]},"metadata":{},"sourceType":"module"}