{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Movies/Movies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { fetchMovies } from '../../redux';\nimport MovieCard from './MovieCard/MovieCard';\nimport Modal from '../UI/Modal/Modal';\nimport \"./Movies.scss\";\n\nconst Movies = ({\n  moviesData,\n  fetchMovies,\n  loader\n}) => {\n  _s();\n\n  // const [movies, setMovies] = useState('')\n  const [selectedMovieId, setSelectedMovieID] = useState(null);\n  const [showFull, setShowFull] = useState(false);\n  const [loading, setLoading] = useState(loader);\n  useEffect(() => {\n    console.log(\"Use useEffect in Movies\");\n    fetchMovies();\n  }, [fetchMovies]);\n  useEffect(() => {\n    setLoading(loader);\n  }, [loader]);\n\n  const SelectedHandler = id => {\n    setSelectedMovieID(id);\n  };\n\n  const HideShowHandler = () => {\n    setShowFull(!showFull);\n  };\n\n  const findMovieByID = id => {\n    return moviesData.filter((key, Indexmovie) => {\n      // eslint-disable-next-line eqeqeq\n      if (moviesData[Indexmovie].id == id) {\n        return moviesData[Indexmovie];\n      } else return null;\n    });\n  };\n\n  const moviesList = moviesData.map(movie => {\n    return /*#__PURE__*/_jsxDEV(MovieCard, {\n      ShowHideHandler: HideShowHandler,\n      SelectedMovieHandler: SelectedHandler,\n      SelectedMovie: selectedMovieId,\n      show: showFull,\n      movieInfo: movie\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  });\n  let modal;\n\n  if (showFull === true) {\n    let selecedMovie = findMovieByID(selectedMovieId); // console.log(selecedMovie[0])//backdrop_path\n\n    modal = /*#__PURE__*/_jsxDEV(Modal, {\n      show: showFull,\n      ShowHideHandler: HideShowHandler,\n      movieInfo: selecedMovie[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  } else modal = null;\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"searchNotFound\",\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (moviesData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"searchNotFound\",\n      children: \"Sorry, No Movies found related to search term\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [modal, /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"movies\",\n      children: moviesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movies, \"lNtr5WYGAP+gna4+IzQnCl+W+vY=\");\n\n_c = Movies;\n\nfunction getVisibleMovies(data) {\n  return data.movies.filter(m => {\n    // console.log(\"title_searchterm\", m.title, data.search_term)\n    return (// (data.search_term === '' || m.title.toLowerCase().indexOf(data.search_term.toLowerCase()) > -1) &&\n      (data.genre === '' || m.genre_ids.includes(data.genre.id)) && // (data.quality === 'all' || m.genre_ids.includes(data.quality)) && \n      m.vote_average >= data.rating.min && m.vote_average <= data.rating.max && m.release_year >= data.release_year.min && m.release_year <= data.release_year.max\n    );\n  });\n}\n\nconst mapStateToProps = state => {\n  // console.log({ state });\n  return {\n    moviesData: getVisibleMovies(state.movies),\n    loader: state.movies.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchMovies: async () => dispatch(await fetchMovies())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movies);\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/Users/yairraiter/movieApp_v3/react-MoviesApp/src/components/Movies/Movies.js"],"names":["React","useState","useEffect","connect","fetchMovies","MovieCard","Modal","Movies","moviesData","loader","selectedMovieId","setSelectedMovieID","showFull","setShowFull","loading","setLoading","console","log","SelectedHandler","id","HideShowHandler","findMovieByID","filter","key","Indexmovie","moviesList","map","movie","modal","selecedMovie","length","getVisibleMovies","data","movies","m","genre","genre_ids","includes","vote_average","rating","min","max","release_year","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux'\nimport { fetchMovies } from '../../redux'\nimport MovieCard from './MovieCard/MovieCard';\nimport Modal from '../UI/Modal/Modal';\nimport \"./Movies.scss\";\n\nconst Movies = ({ moviesData, fetchMovies, loader }) => {\n\n    // const [movies, setMovies] = useState('')\n    const [selectedMovieId, setSelectedMovieID] = useState(null)\n    const [showFull, setShowFull] = useState(false)\n    const [loading, setLoading] = useState(loader)\n\n\n    useEffect(() => {\n        console.log(\"Use useEffect in Movies\")\n        fetchMovies()\n    }, [fetchMovies])\n    useEffect(() => {\n        setLoading(loader)\n    }, [loader])\n\n    const SelectedHandler = id => {\n        setSelectedMovieID(id);\n    }\n\n    const HideShowHandler = () => {\n        setShowFull(!showFull)\n    }\n\n    const findMovieByID = (id) => {\n        return moviesData.filter((key, Indexmovie) => {\n            // eslint-disable-next-line eqeqeq\n            if (moviesData[Indexmovie].id == id) {\n                return moviesData[Indexmovie]\n            }\n            else return null\n        })\n    }\n\n    const moviesList = moviesData.map((movie) => {\n        return <MovieCard\n            key={movie.id}\n            ShowHideHandler={HideShowHandler}\n            SelectedMovieHandler={SelectedHandler}\n            SelectedMovie={selectedMovieId}\n            show={showFull}\n            movieInfo={movie}\n        />\n    })\n\n    let modal;\n    if (showFull === true) {\n        let selecedMovie = findMovieByID(selectedMovieId)\n        // console.log(selecedMovie[0])//backdrop_path\n        modal =\n            <Modal\n                show={showFull}\n                ShowHideHandler={HideShowHandler}\n                movieInfo={selecedMovie[0]}\n            />\n    }\n    else modal = null;\n\n    if (loading) {\n        return <div id=\"searchNotFound\">Loading movies...</div>\n    }\n    if (moviesData.length === 0) {\n        return <div id=\"searchNotFound\">Sorry, No Movies found related to search term</div>\n    }\n    return (\n        <>\n            { modal}\n            <ul className=\"movies\">\n                {moviesList}\n            </ul>\n        </>\n    )\n}\n\nfunction getVisibleMovies(data) {\n    return data.movies\n        .filter(m => {\n            // console.log(\"title_searchterm\", m.title, data.search_term)\n            return (\n                // (data.search_term === '' || m.title.toLowerCase().indexOf(data.search_term.toLowerCase()) > -1) &&\n                (data.genre === '' || m.genre_ids.includes(data.genre.id)) &&\n                // (data.quality === 'all' || m.genre_ids.includes(data.quality)) && \n                (m.vote_average >= data.rating.min && m.vote_average <= data.rating.max) &&\n                (m.release_year >= data.release_year.min && m.release_year <= data.release_year.max)\n            );\n        });\n}\n\nconst mapStateToProps = state => {\n    // console.log({ state });\n    return {\n        moviesData: getVisibleMovies(state.movies),\n        loader: state.movies.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchMovies: async () => dispatch(await fetchMovies())\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Movies)\n\n"]},"metadata":{},"sourceType":"module"}